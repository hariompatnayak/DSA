class greaterPair
{
    public:
    bool operator() (const pair<int, int>& p1, const pair<int, int>& p2)
    {
        return p1.second > p2.second;
    }
};

typedef priority_queue<pair<int, int>, vector<pair<int, int>>, greaterPair> minPQ;

int prims(int n, vector<vector<int>> edges, int start) {
    vector<vector<pair<int, int>>> adj(n+1);
    for(int i = 0; i < edges.size(); i++)
    {
        adj[edges[i][0]].push_back({edges[i][1], edges[i][2]});
        adj[edges[i][1]].push_back({edges[i][0], edges[i][2]});
    }
    minPQ pq;
    pq.push({start, 0});
    vector<bool> visited(n+1);
    int minCost = 0;
    while(!pq.empty())
    {
        int curr = pq.top().first, wt = pq.top().second;
        pq.pop();
        if(visited[curr]) continue;
        visited[curr] = true;
        minCost += wt;
        for(const auto& neighbor : adj[curr])
            if(!visited[neighbor.first])
                pq.push({neighbor.first, neighbor.second});
    }
    return minCost;
}